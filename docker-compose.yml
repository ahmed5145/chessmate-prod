version: '3.8'

services:
  web:
    build: .
    restart: always
    ports:
      - "8000:8000"
    depends_on:
      - db
      - redis
    environment:
      - DATABASE_HOST=db
      - DATABASE_PORT=5432
      - DATABASE_NAME=chessmate
      - DATABASE_USER=postgres
      - DATABASE_PASSWORD=postgres
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - DJANGO_SETTINGS_MODULE=chess_mate.settings
      - SECRET_KEY=local_development_key
      - STOCKFISH_PATH=/usr/games/stockfish
      - ENABLE_CELERY=true
    volumes:
      - ./chess_mate:/app/chess_mate
      - static_volume:/app/chess_mate/staticfiles
      - media_volume:/app/chess_mate/media

  db:
    image: postgres:15-alpine
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=chessmate
    ports:
      - "5432:5432"

  redis:
    image: redis:alpine
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  celery:
    build: .
    restart: always
    command: celery -A chess_mate worker -l info
    volumes:
      - ./chess_mate:/app/chess_mate
    depends_on:
      - web
      - redis
      - db
    environment:
      - DATABASE_HOST=db
      - DATABASE_PORT=5432
      - DATABASE_NAME=chessmate
      - DATABASE_USER=postgres
      - DATABASE_PASSWORD=postgres
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - DJANGO_SETTINGS_MODULE=chess_mate.settings
      - SECRET_KEY=local_development_key
      - STOCKFISH_PATH=/usr/games/stockfish

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    command: npm start
    environment:
      - REACT_APP_API_URL=http://localhost:8000/api

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - static_volume:/app/static
      - media_volume:/app/media
    depends_on:
      - web
      - frontend

volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume:
