name: ChessMate CD

on:
  push:
    branches: [ main, staging ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'production' || 'staging') }}
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r chess_mate/requirements.txt
        cd frontend
        npm ci
    
    - name: Build frontend
      run: |
        cd frontend
        npm run build
    
    - name: Collect static files
      env:
        DJANGO_SETTINGS_MODULE: chess_mate.settings
      run: |
        cd chess_mate
        python manage.py collectstatic --noinput
    
    - name: Run migrations
      run: |
        cd chess_mate
        python manage.py migrate --noinput
    
    - name: Package application
      run: |
        zip -r chessmate-app.zip \
          chess_mate/ \
          frontend/build/ \
          .env.example \
          requirements.txt \
          Procfile \
          manage.py \
          README.md
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    - name: Deploy to Elastic Beanstalk
      if: ${{ github.event.inputs.environment == 'production' || github.ref == 'refs/heads/main' }}
      uses: einaregilsson/beanstalk-deploy@v21
      with:
        aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        application_name: chessmate
        environment_name: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'ChessMate-Production' || 'ChessMate-Staging') }}
        version_label: chessmate-${{ github.run_number }}-${{ github.sha }}
        region: ${{ secrets.AWS_REGION }}
        deployment_package: chessmate-app.zip
    
    - name: Deploy to Staging Server
      if: ${{ github.event.inputs.environment == 'staging' || github.ref == 'refs/heads/staging' }}
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USERNAME }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        port: ${{ secrets.STAGING_PORT }}
        script: |
          mkdir -p ~/deployments/chessmate-${{ github.run_number }}
          cd ~/deployments/chessmate-${{ github.run_number }}
          
          # Pull the latest code
          git clone https://github.com/${{ github.repository }}.git .
          git checkout ${{ github.sha }}
          
          # Setup virtual environment
          python -m venv venv
          source venv/bin/activate
          pip install -r chess_mate/requirements.txt
          
          # Setup environment variables
          cp .env.example .env
          # Here you would set environment variables
          
          # Build frontend
          cd frontend
          npm ci
          npm run build
          cd ..
          
          # Collect static files and run migrations
          cd chess_mate
          python manage.py collectstatic --noinput
          python manage.py migrate --noinput
          
          # Restart services
          sudo systemctl restart chessmate-gunicorn
          sudo systemctl restart chessmate-celery-worker
          
          # Update symbolic link to current deployment
          cd ~/
          ln -sfn ~/deployments/chessmate-${{ github.run_number }} chessmate-current
    
    - name: Post-deployment checks
      run: |
        echo "Deployment completed for environment: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'production' || 'staging') }}"
        echo "Running post-deployment checks..."
        
        # Add your health check logic here
        # For example, checking if the API is responding
        # curl --fail --silent --output /dev/null https://api.chessmate.com/health
        
        echo "Post-deployment checks completed successfully." 