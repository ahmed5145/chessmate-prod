name: ChessMate Tests

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'

jobs:
  backend-tests:
    name: Backend Tests - Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']

    services:
      redis:
        image: redis:6
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_chessmate
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install System Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libpq-dev python3-dev stockfish

    - name: Install Python Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-django pytest-cov pytest-mock fakeredis

    - name: Set up Environment
      run: |
        echo "TESTING=True" >> .env
        echo "DEBUG=True" >> .env
        echo "SECRET_KEY=test-secret-key" >> .env
        echo "DB_NAME=test_chessmate" >> .env
        echo "DB_USER=postgres" >> .env
        echo "DB_PASSWORD=postgres" >> .env
        echo "DB_HOST=localhost" >> .env
        echo "DB_PORT=5432" >> .env
        echo "REDIS_HOST=localhost" >> .env
        echo "REDIS_PORT=6379" >> .env
        echo "STOCKFISH_PATH=/usr/games/stockfish" >> .env

    - name: Run Standalone Tests
      run: |
        python run_tests.py --standalone --coverage

    - name: Run Django Tests
      run: |
        python run_tests.py --django --coverage

    - name: Generate Combined Coverage Report
      run: |
        python run_tests.py --coverage --html --fail-under 80

    - name: Upload Coverage Report
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report-python${{ matrix.python-version }}
        path: htmlcov/

    - name: Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: ./coverage.xml
        flags: backend,python${{ matrix.python-version }}
        fail_ci_if_error: false
        verbose: true

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'frontend/package-lock.json'

    - name: Install Dependencies
      run: |
        cd frontend
        npm ci

    - name: Run Tests
      run: |
        cd frontend
        npm test -- --watchAll=false --coverage

    - name: Upload Coverage Report
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report-frontend
        path: frontend/coverage/

    - name: Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: ./frontend/coverage/coverage-final.json
        flags: frontend
        fail_ci_if_error: false

  linting:
    name: Code Quality & Security Checks
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        cache: 'pip'

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'frontend/package-lock.json'

    - name: Install Backend Linting Tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 isort black mypy bandit safety pylint pylint-django flake8-django

    - name: Install Frontend Linting Tools
      run: |
        cd frontend
        npm ci

    - name: Check Python Code Style (flake8)
      run: |
        flake8 chess_mate/ --count --select=E9,F63,F7,F82,F401,F841,E722,E711,E712,E713,E714 --max-line-length=120 --show-source --statistics

    - name: Check Python Imports (isort)
      run: |
        isort --check-only --profile black chess_mate/

    - name: Check Python Formatting (black)
      run: |
        black --check --line-length=120 chess_mate/

    - name: Check Python Type Hints (mypy)
      run: |
        mypy chess_mate/ --ignore-missing-imports

    - name: Run Python Security Scan (bandit)
      run: |
        bandit -r chess_mate/ -x "chess_mate/tests/,chess_mate/*/tests/"

    - name: Check Python Dependencies for Vulnerabilities
      run: |
        safety check -r requirements.txt --full-report

    - name: Run Django Specific Linting (pylint-django)
      run: |
        pylint --load-plugins=pylint_django --django-settings-module=chess_mate.settings chess_mate/core/ --disable=C0111,C0103,C0303,W0613,R0903,W0511,R0913,C0330,C0326,R0201,R0902,R0914,W0212,C0301,R0904,W0221,E1101

    - name: Check Frontend Code Style (eslint)
      run: |
        cd frontend
        npm run lint

    - name: Check Frontend Code Format (prettier)
      run: |
        cd frontend
        npm run format:check || true # Don't fail CI for formatting issues

    - name: Check Frontend Dependencies for Vulnerabilities
      run: |
        cd frontend
        npm audit --production || true # Don't fail CI on audit (report only)

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Run Docker Security Scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        format: 'table'
        exit-code: '1'
        severity: 'CRITICAL,HIGH'
        ignore-unfixed: true

    - name: Run Repository Security Scan
      uses: snyk/actions/scan@master
      with:
        args: --severity-threshold=high --all-projects
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN || 'dummy-token-for-pr-builds' }}

  health-check:
    name: Health Check Test
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        cache: 'pip'

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Set up Environment
      run: |
        echo "TESTING=True" >> .env
        echo "DEBUG=True" >> .env
        echo "SECRET_KEY=test-secret-key" >> .env

    - name: Start Server in Background
      run: |
        python manage.py runserver &
        sleep 5  # Let the server start up

    - name: Test Health Check Endpoint
      run: |
        curl -f http://localhost:8000/health/ || exit 1
        echo "Health check passed"
